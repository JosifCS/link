// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  hash        String   @db.VarChar(127)
  email       String   @unique @db.VarChar(255)
  token       Token?
  files       File[]
  stories     Story[]

  @@map("users")
}

model Token {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    valid      Boolean  @default(true)
    expiration DateTime
    user       User     @relation(fields: [userId], references: [id])
    userId     Int      @unique

    @@map("tokens")
}

model File {
    id          Int       @id @default(autoincrement())
    name        String
    uuid        String
    type        String
    path        String
    createdAt   DateTime  @default(now())
    createdBy   User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    userId      Int
    
    @@map("files")
}

model Story {
  id          Int @id @default(autoincrement())
  uuid        String
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User?      @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdById Int?
  characters  Character[]
  chapters    Chapter[]

  @@map("stories")
}

model Chapter {
  id          Int @id @default(autoincrement())
  title       String
  description String
  dialogs     Dialog[]
  story       Story @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId     Int

  @@map("chapters")
}

model Character {
  id          Int @id @default(autoincrement())
  title       String
  description String
  story       Story @relation(fields: [storyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storyId     Int 
  dialogs     Dialog[]

  @@map("characters")
}

model Dialog {
  id          Int @id @default(autoincrement())
  title       String
  description String
  character   Character @relation(fields: [characterId], references: [id])
  characterId Int
  sentences   Sentence[]
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId   Int 

  @@map("dialogs")
}

model Sentence {
  id          Int @id @default(autoincrement())
  text        String
  options     SentenceOption[] @relation(name: "OptionToSentence")
  nextOptions SentenceOption[] @relation(name: "NextSentence")
  dialog      Dialog @relation(fields: [dialogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dialogId    Int

  @@map("sentences")
}

model SentenceOption {
  id         Int @id @default(autoincrement())
  text       String
  sentence   Sentence @relation(name: "OptionToSentence", fields: [sentenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sentenceId Int
  next       Sentence? @relation(name: "NextSentence", fields: [nextId], references: [id])
  nextId     Int?

  @@map("sentenceOptions")
}